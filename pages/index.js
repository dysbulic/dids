import { EthereumAuthProvider, ThreeIdConnect } from "@3id/connect";
import ThreeIdResolver from "@ceramicnetwork/3id-did-resolver";
import { CeramicClient } from "@ceramicnetwork/http-client";
import { Caip10Link } from "@ceramicnetwork/stream-caip10-link";
import {
  Button, chakra, Flex,
  Input, ListItem, OrderedList, Select, Stack, Text
} from "@chakra-ui/react";
import WalletConnectProvider from "@walletconnect/web3-provider";
import { DID } from "dids";
import { providers } from "ethers";
import Head from 'next/head';
import { useCallback, useState } from "react";
import Web3Modal from "web3modal";

export default function Home() {
  const [logs, setLogs] = useState([]);
  const [daemon, setDaemon] = useState('https://ceramic-clay.3boxlabs.com');
  const [ceramicNetwork, setCeramicNetwork] = useState();
  const log = (msg) => setLogs((logs) => [msg, ...logs]);

  const connect = useCallback(async () => {
    try {
      const providerOptions = {
        walletconnect: {
          package: WalletConnectProvider,
          options: {
            infuraId: "781d8466252d47508e177b8637b1c2fd"
          }
        }
      };

      const web3Modal = new Web3Modal({
        network: "mainnet",
        cacheProvider: true,
        providerOptions
      });

      log("Connecting using Web3Modal");
      const modal = await web3Modal.connect();
      const web3Provider = new providers.Web3Provider(modal);
      log(
        `Connected Network: ${JSON.stringify(await web3Provider.getNetwork())}`
      );

      const [address] = await modal.request({ method: 'eth_requestAccounts' })
        // const address = await web3Provider.getSigner().getAddress();
      // const [address] = await modal.enable();
      log(`Ξ Wallet Address: ${address}`);
      const threeIdConnect = new ThreeIdConnect(ceramicNetwork);
      const authProvider = new EthereumAuthProvider(modal, address);

      log(`Connecting 3Id Via ${daemon}`);
      await threeIdConnect.connect(authProvider);
      log(`Creating Ceramic Client (${ceramicNetwork})…`);
      const ceramic = new CeramicClient(daemon)
      log(`Creating DID…`);
      ceramic.did = new DID({
        provider: threeIdConnect.getDidProvider(),
        resolver: ThreeIdResolver.getResolver(ceramic)
      });
      log(`Authenticating DID…`);
      await ceramic.did.authenticate();
      const caipId = `${address.toLowerCase()}@eip155:1`;
      log(`Resolving CAIP-10: ${caipId}`);
      const caip10 = await Caip10Link.fromAccount(ceramic, caipId);
      log(`Connected DID: ${ceramic.did?.id}`);
      log(`CAIP-10 DID: ${caip10.did}`);
    } catch (err) {
      log(
        <Text as="span" color="red">
          {err.message}
        </Text>
      );
    } finally {
      log(<chakra.hr mt="0.5em"/>)
    }
  }, [ceramicNetwork, daemon]);

  return (
    <Stack maxW="50em" m="auto" mt="3em">
      <Head>
        <title>Ceramic DIDs Test Case</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex>
        <Button onClick={connect}>Connect:</Button>
        <Input
          flex={1}
          value={daemon}
          onChange={({ target: { value } }) => {
            setDaemon(value);
          }}
        />
        <Select
          value={ceramicNetwork}
          onChange={({ target: { value } }) => {
            console.info({ value })
            setCeramicNetwork(value === '' ? undefined : value)
          }}
          w="auto"
        >
          <option value="" style={{ fontStyle: 'italic' }}>undefined</option>
          <option value="testnet-clay">Clay Testnet</option>
          <option value="mainnet">Mainnet</option>
        </Select>
      </Flex>
      <OrderedList reversed>
        {logs.map((msg, idx) => (
          <ListItem key={idx}>{msg}</ListItem>
        ))}
      </OrderedList>
      {logs.length > 0 && <Button onClick={() => setLogs([])}>Clear</Button>}
    </Stack>
  );
};
